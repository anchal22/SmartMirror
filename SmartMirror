import cv2
import sys
import os
import time
from PIL import Image
import glob
import csv
import string
import random
import thread

from PyQt4.QtCore import QSize, Qt
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

tmpDir = '/home/shivangi/SmartMirror-master/'

def face_capture(imgPath):
    
    # Camera 0 is the integrated web cam on my netbook
    camera_port = 0
    cascPath = 'haarcascade_frontalface_default.xml'
    faceCascade = cv2.CascadeClassifier(cascPath) 
    
    

    #Number of frames to throw away while the camera adjusts to light levels
    ramp_frames = 20
    
    cam = cv2.VideoCapture(camera_port) 
    face_cnt=0;
    while True:
        for i in xrange(ramp_frames):
            s, im = cam.read()   
        print("Taking image... ")
        ret,image = cam.read()
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        faces = faceCascade.detectMultiScale(
            gray,
            scaleFactor=1.1,
            minNeighbors=5,
            minSize=(120, 120),
            flags=cv2.cv.CV_HAAR_SCALE_IMAGE
        )
        
        # Draw a rectangle around the faces
        max_area = 0
        mx = 0
        my = 0 
        mh = 0 
        mw = 0
        for (x, y, w, h) in faces:
            #cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
            if w*h > max_area:
                mx = x
                my = y
                mh = h
                mw = w
                max_area=w*h

        cv2.imshow('Video', image)        
        image_crop = image[my:my+mh,mx:mx+mw]
        cv2.imwrite(imgPath, image_crop)
        face_cnt=face_cnt+1
    
        if face_cnt==1:
            break    
    # When everything is done, release the capture
    cam.release()
    cv2.destroyAllWindows()

   # defining id_generator function
def id_generator(size=20, chars=string.ascii_lowercase + string.digits + string.ascii_uppercase):
    return ''.join(random.choice(chars) for _ in range(size))

#main code
if __name__ == '__main__':
    imageName=id_generator()+'.jpg'
    print('file name %s' % imageName)
    imgPath=tmpDir+imageName

    try:
        
        thread.start_new_thread( face_capture, (3, ) )
        print('Face Capturing Started')
        face_capture(imgPath)
        print('Face Capturing Completed')
    except Exception as e:
        print("Error: %s" % e.message)

        

    except Exception as e:
        print "Error: unable to start thread"
        print e

    while 1:
       pass  
       
